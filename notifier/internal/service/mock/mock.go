// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	redis "github.com/go-redis/redis/v8"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNotifierService is a mock of Notifier interface
type MockNotifierService struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierServiceMockRecorder
}

// MockNotifierServiceMockRecorder is the mock recorder for MockNotifierService
type MockNotifierServiceMockRecorder struct {
	mock *MockNotifierService
}

// NewMockNotifierService creates a new mock instance
func NewMockNotifierService(ctrl *gomock.Controller) *MockNotifierService {
	mock := &MockNotifierService{ctrl: ctrl}
	mock.recorder = &MockNotifierServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotifierService) EXPECT() *MockNotifierServiceMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockNotifierService) Publish(ctx context.Context, book string, message interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, book, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockNotifierServiceMockRecorder) Publish(ctx, book, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNotifierService)(nil).Publish), ctx, book, message)
}

// Subscribe mocks base method
func (m *MockNotifierService) Subscribe(ctx context.Context, book string) <-chan *redis.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, book)
	ret0, _ := ret[0].(<-chan *redis.Message)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockNotifierServiceMockRecorder) Subscribe(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockNotifierService)(nil).Subscribe), ctx, book)
}
