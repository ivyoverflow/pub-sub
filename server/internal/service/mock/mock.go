// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPublisherSubscriberI is a mock of PublisherSubscriberI interface
type MockPublisherSubscriberI struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherSubscriberIMockRecorder
}

// MockPublisherSubscriberIMockRecorder is the mock recorder for MockPublisherSubscriberI
type MockPublisherSubscriberIMockRecorder struct {
	mock *MockPublisherSubscriberI
}

// NewMockPublisherSubscriberI creates a new mock instance
func NewMockPublisherSubscriberI(ctrl *gomock.Controller) *MockPublisherSubscriberI {
	mock := &MockPublisherSubscriberI{ctrl: ctrl}
	mock.recorder = &MockPublisherSubscriberIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublisherSubscriberI) EXPECT() *MockPublisherSubscriberIMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockPublisherSubscriberI) Publish(topic string, message interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", topic, message)
}

// Publish indicates an expected call of Publish
func (mr *MockPublisherSubscriberIMockRecorder) Publish(topic, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublisherSubscriberI)(nil).Publish), topic, message)
}

// Subscribe mocks base method
func (m *MockPublisherSubscriberI) Subscribe(topic string) chan interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", topic)
	ret0, _ := ret[0].(chan interface{})
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockPublisherSubscriberIMockRecorder) Subscribe(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPublisherSubscriberI)(nil).Subscribe), topic)
}
